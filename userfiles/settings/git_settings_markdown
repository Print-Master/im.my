## GIT Settings
###General
git login
: igor_kovalchuk@forprint.net.ua
password
: kardan0303
##Bush Settings
* ls - list directory
* cd - change directory
## Command prompt
* dir - list directory
* cd - change directory
* mkdir - make new folder
##Help
* git help
* git help --config
## GIT Info
* git --version - information about git version
    * git config --list - show Git settings
        * git config --list --global - show global Git settings
        * git config --list --system - show local Git settings
        * git config --list --show-origin - also shows the origin file of each config item
* git log \<alias l> - show information about status Git
* git log \<alias g>- show information about status Git
* git reflog - show history commit
## GIT Config
* git config -- global user.name \<Print-Master> - set user name for project
* git config --global user.email \<igor_kovalchuk@forprint.net.ua> - set user login for GitHub
## GIT Hub
* git remote add origin \<https://github.com/Print-Master/im.my.git> - add path fot remote repository on GitHub
* git push -u origin \<master> - make push to GitHub and set origin branch
* git push --set-upstream origin \<branch_name> - make \<branch_name> and push to GitHub
* git push origin --force - if conflict
* git push origin -f - if conflict
* git push origin +\<branch_name> - if conflict
    * git pull - load all changes from GitHub to project like "fetch + merge"
    * git fetch - load all changes from GitHub to stage area after need make "merge"
	* git clone \<https://github.com/Print-Master/im.my.git> - clone repository from GitHub
## GIT Local
* git init - initialization local repository
* git status \(alias - \<s>) - show status for local repository
* git add . - add all file to stage
    * git add \<dir_name> - add directory to stage
	* git add \<file_name> - add file to stage
	    * git rm -- cached \<dir_name> - unstage directory
		* git rm -- cached \<file_name> - unstage file
		    * git restore \<file> - discart changes in working directory
			* git restore -- staged \<file> - remove changes to last version <unstage>
* git commit -m "commit_name" - create new commit with name "commit_name"
* git commit --amend - merge changes to previous commit
* git commit --fixup=\<hashe> - merge changes to previous commit
* git diff --staged - show changes in stage area
* git diff \<commit_1> \<commit_2> - show difference between two commit
* git remote add origin https://github.com/Print-Master/im.my.git - add remote repository
## GIT Branch
* git branch \(alias \<br>) - show all branch amd current branch
    * git branch \<name_branch> - create new branch \<name_branch>
	    * git branch -D \<name_branch> - delete branch \<name_branch>
		    * git checkout \(alias <co>) \<name_branch> - switch to branch \<name_branch>
			    * git checkout \(alias <co>) -b \<name_branch> - create new branch and switch to \<name_branch>
## GIT Merge & Rebase
* git merge \<branch_name> - merge current branch with \<branch_name>, load all commit from \<branch_name> to current branch
* git merge \<future_name> \<branch_name> - merge current branch with \<branch_name>, load all commit from \<branch_name> to current branch
    * git rebase \<master_name> - merge current branch with \<branch_name>, set all commit from current branch after branch \<master_name>
    * git rebase -i - interactive rebase
    * git rebase -i HEAD ~4 - interactive rebase with change history
    * git rebase -i --autosquash HEAD~3 -
## GIT Ignore
* .gitignore - file in root directory of project fot untraking file or directory


## GIT Alias
* [alias]
	* s = status --short
	* st = ?? status
	* l = log --online --graph --decorate --all
	* g = log --graph --abbrev-commit --decorate --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'
	* br = branch
	* co = checkout

## Help
git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

Main Porcelain Commands
   add                  Add file contents to the index
   am                   Apply a series of patches from a mailbox
   archive              Create an archive of files from a named tree
   bisect               Use binary search to find the commit that introduced a bug
   branch               List, create, or delete branches
   bundle               Move objects and refs by archive

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

